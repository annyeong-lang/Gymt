{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sunwoo\\\\Documents\\\\Gymt\\\\App.js\";\nimport React, { useState } from \"react\";\nimport AppLoading from 'expo-app-loading';\nimport * as Font from \"expo-font\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { Asset } from \"expo-asset\";\nimport { Ionicons, FontAwesome } from \"@expo/vector-icons\";\nimport Stack from \"./navigation/Stack\";\n\nvar cacheImages = function cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n};\n\nvar cacheFonts = function cacheFonts(fonts) {\n  return fonts.map(function (font) {\n    return [Font.loadAsync(font), Font.loadAsync(font)];\n  });\n};\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setIsReady = _useState2[1];\n\n  var loadAssets = function loadAssets() {\n    var images = cacheImages([\"https://images.unsplash.com/photo-1590487988256-9ed24133863e?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjR8fGd5bXxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=60\", require(\"./assets/splash.png\")]);\n    var fonts = cacheFonts([Ionicons.font, FontAwesome.font]);\n    return Promise.all([].concat(_toConsumableArray(images), _toConsumableArray(fonts)));\n  };\n\n  var onFinish = function onFinish() {\n    return setIsReady(true);\n  };\n\n  return isReady ? React.createElement(React.Fragment, null, React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, React.createElement(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  })), React.createElement(StatusBar, {\n    barStyle: \"light-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  })) : React.createElement(AppLoading, {\n    startAsync: loadAssets,\n    onFinish: onFinish,\n    onError: console.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Sunwoo/Documents/Gymt/App.js"],"names":["React","useState","AppLoading","Font","NavigationContainer","Asset","Ionicons","FontAwesome","Stack","cacheImages","images","map","image","Image","prefetch","fromModule","downloadAsync","cacheFonts","fonts","font","loadAsync","App","isReady","setIsReady","loadAssets","require","Promise","all","onFinish","console","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,oBAAtC;AACA,OAAOC,KAAP;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,MAAM;AAAA,SACxBA,MAAM,CAACC,GAAP,CAAW,UAAAC,KAAK,EAAI;AAClB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAOP,KAAK,CAACU,UAAN,CAAiBH,KAAjB,EAAwBI,aAAxB,EAAP;AACD;AACF,GAND,CADwB;AAAA,CAA1B;;AAQA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK;AAAA,SACtBA,KAAK,CAACP,GAAN,CAAU,UAAAQ,IAAI;AAAA,WAAI,CAAChB,IAAI,CAACiB,SAAL,CAAeD,IAAf,CAAD,EAAuBhB,IAAI,CAACiB,SAAL,CAAeD,IAAf,CAAvB,CAAJ;AAAA,GAAd,CADsB;AAAA,CAAxB;;AAEA,eAAe,SAASE,GAAT,GAAe;AAC5B,kBAA8BpB,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOqB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAMd,MAAM,GAAGD,WAAW,CAAC,CACzB,qKADyB,EAEzBgB,OAAO,uBAFkB,CAAD,CAA1B;AAIA,QAAMP,KAAK,GAAGD,UAAU,CAAC,CAACX,QAAQ,CAACa,IAAV,EAAgBZ,WAAW,CAACY,IAA5B,CAAD,CAAxB;AACA,WAAOO,OAAO,CAACC,GAAR,8BAAgBjB,MAAhB,sBAA2BQ,KAA3B,GAAP;AACD,GAPD;;AAQA,MAAMU,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAML,UAAU,CAAC,IAAD,CAAhB;AAAA,GAAjB;;AACA,SAAOD,OAAO,GACZ,0CACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADY,GAQZ,oBAAC,UAAD;AACE,IAAA,UAAU,EAAEE,UADd;AAEE,IAAA,QAAQ,EAAEI,QAFZ;AAGE,IAAA,OAAO,EAAEC,OAAO,CAACC,KAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF;AAcD","sourcesContent":["import React, { useState } from \"react\";\r\nimport AppLoading from 'expo-app-loading';\r\nimport * as Font from \"expo-font\";\r\nimport { Image, StatusBar } from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { Asset } from \"expo-asset\";\r\nimport { Ionicons, FontAwesome } from \"@expo/vector-icons\";\r\nimport Stack from \"./navigation/Stack\";\r\n\r\n\r\nconst cacheImages = images =>\r\n  images.map(image => {\r\n    if (typeof image === \"string\") {\r\n      return Image.prefetch(image);\r\n    } else {\r\n      return Asset.fromModule(image).downloadAsync();\r\n    }\r\n  });\r\nconst cacheFonts = fonts =>\r\n  fonts.map(font => [Font.loadAsync(font), Font.loadAsync(font)]);\r\nexport default function App() {\r\n  const [isReady, setIsReady] = useState(false);\r\n  const loadAssets = () => {\r\n    const images = cacheImages([\r\n      \"https://images.unsplash.com/photo-1590487988256-9ed24133863e?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjR8fGd5bXxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=60\",\r\n      require(\"./assets/splash.png\")\r\n    ]);\r\n    const fonts = cacheFonts([Ionicons.font, FontAwesome.font]);\r\n    return Promise.all([...images, ...fonts]);\r\n  };\r\n  const onFinish = () => setIsReady(true);\r\n  return isReady ? (\r\n    <>\r\n      <NavigationContainer>\r\n        <Stack />\r\n      </NavigationContainer>\r\n      <StatusBar barStyle=\"light-content\" />\r\n    </>\r\n  ) : (\r\n    <AppLoading\r\n      startAsync={loadAssets}\r\n      onFinish={onFinish}\r\n      onError={console.error}\r\n    />\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}